<?xml version="1.0"?>
<component name="org.nuxeo.ecm.notification.NotificationComponent">

  <implementation class="org.nuxeo.ecm.notification.NotificationComponent" />

  <service>
    <provide interface="org.nuxeo.ecm.notification.NotificationService" />
    <provide interface="org.nuxeo.ecm.notification.NotificationSettingsService" />
    <provide interface="org.nuxeo.ecm.notification.NotificationStreamCallback" />
    <provide interface="org.nuxeo.ecm.notification.NotificationStreamConfig" />
  </service>

  <extension-point name="resolver">
    <documentation>
      <code>
        Register notifications resolvers. A resolver has a name and aims to identify if a core event deserves a
        notification.
        <p />
        Label and description are handled based on an automatic properties computing following this format:
        `label.notification.resolver.RESOLVER_NAME` and `description.notification.resolver.RESOLVER_NAME`.

        <resolver id="deliverable"
                  class="FileCreatedResolver">
          <message>Some text to describe @{contextKeyObject} modifications, because @{contextKeyUser} made changes.
          </message>
        </resolver>
      </code>
    </documentation>

    <object class="org.nuxeo.ecm.notification.resolver.ResolverDescriptor" />
  </extension-point>

  <extension-point name="notifier">
    <documentation>
      Register notifications notifier. A notifier is a distribution channel, each notifier is the final step of a
      notification, and must distribute it.
      <code>
        <notifier id="inapp"
                  class="org.nuxeo.ecm.platform.notification.notifier.DummyNotifier">
          <property name="myProp">myValue</property>
        </notifier>
      </code>
    </documentation>

    <object class="org.nuxeo.ecm.notification.notifier.NotifierDescriptor" />
  </extension-point>

  <extension-point name="settings">
    <documentation>
      Register the default settings for notifications. For each resolver, it is possible to define the active notifiers
      and if they are available by default. If there is no entry defined, by default, the notifiers are enabled but not
      selected by default.
      <p />
      Label and description are handled based on an automatic properties computing following this format:
      `label.notification.notifier.NOTIFIER_NAME` and `description.notification.notifier.NOTIFIER_NAME`.

      <code>
        <!-- XXX Implementation: For now, a notifier is not enabled by default until you set up a default settings.
        Can be the opposite, in order to enable it by default in case there is no settings.
        @see getSelectedNotifierspatchers(java.lang.String, java.lang.String) -->
        <settings id="resolverId">
          <notifier name="notifierId1" default="true" enabled="true" />
          <notifier name="notifierId2" default="false" enabled="true" />
          ...
        </settings>
        <settings id="resolverId2">
          <notifier name="notifierId1" enabled="false" />
          <notifier name="notifierId2" enabled="false" />
          ...
        </settings>
      </code>
    </documentation>

    <object class="org.nuxeo.ecm.notification.SettingsDescriptor" />
  </extension-point>

  <extension-point name="eventTransformer">
    <documentation>
      <code>
        Register Event Transformers. An Event Transformer has a name and aims to add context information to an
        EventRecord from the Event.
        <eventTransformer id="fileCreatedTransformer"
                          class="FileCreatedTransformer" />
      </code>
    </documentation>

    <object class="org.nuxeo.ecm.notification.transformer.EventTransformerDescriptor" />
  </extension-point>

  <extension-point name="filter">
    <documentation>
      <code>
        Register Event Filters. An Event Filter has a name and aims to filter events considered to be duplicated in
        the same thread. For example, avoiding multiple edits on the same document.
        <eventFilter id="collectionEventsFilter"
                     class="CollectionEventsFilter" />
      </code>
    </documentation>

    <object class="org.nuxeo.ecm.notification.event.EventFilterDescriptor" />
  </extension-point>

</component>
